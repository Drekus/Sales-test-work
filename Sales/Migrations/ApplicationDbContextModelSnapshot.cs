// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sales.Data;

namespace Sales.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Sales.Models.DataModels.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .IsRequired();

                    b.Property<string>("ISBN")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.Property<int>("PublishingYear");

                    b.Property<int>("Quantity");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new { Id = 1, Author = "Рихтер Джеффри", ISBN = "978-5-496-00433-6", Price = 999.99m, PublishingYear = 2013, Quantity = 5, Title = "CLR via C#. Программирование на платформе Microsoft .NET Framework 4.5 на языке C#" },
                        new { Id = 2, Author = "Ошероув Рой", ISBN = "978-5-94074-945-5", Price = 699.99m, PublishingYear = 2014, Quantity = 6, Title = "Искусство автономного тестирования с примерами на C#" },
                        new { Id = 3, Author = "Таненбаум Э., Остин Т.", ISBN = "978-5-496-00337-7", Price = 850m, PublishingYear = 2013, Quantity = 4, Title = "Архитектура компьютера" },
                        new { Id = 4, Author = "Таненбаум Эндрю", ISBN = "978-5-4461-1155-8", Price = 850m, PublishingYear = 2010, Quantity = 2, Title = "Современные операционные системы" },
                        new { Id = 5, Author = "Вайсфельд Мэтт", ISBN = " 978-5-496-00793-1", Price = 630m, PublishingYear = 2014, Quantity = 3, Title = "Объектно-ориентированное мышление" },
                        new { Id = 6, Author = " Соломон Дэвид, Руссинович Марк, Ионеску Алекс , Йосифович Павел", ISBN = "978-5-4461-0663-9", Price = 1800m, PublishingYear = 2018, Quantity = 16, Title = "Внутреннее устройство Windows" },
                        new { Id = 7, Author = "Томас Х. Кормен, Чарльз И. Лейзерсон, Рональд Л. Ривест, Клиффорд Штайн ", ISBN = "978-5-8459-2016-4", Price = 1950m, PublishingYear = 2015, Quantity = 4, Title = "Алгоритмы: построение и анализ" },
                        new { Id = 8, Author = "Страуструп Бьярне", ISBN = "978-5-8459-1705-8", Price = 750m, PublishingYear = 2011, Quantity = 2, Title = "Программирование: принципы и практика использования C++" },
                        new { Id = 9, Author = "Лафоре Р.", ISBN = " 978-5-496-00740-5", Price = 880m, PublishingYear = 2011, Quantity = 3, Title = "Структуры данных и алгоритмы в Java" },
                        new { Id = 10, Author = "Албахарв Джозеф, Албахари Бен", ISBN = "978-5-8459-2087-4", Price = 1150m, PublishingYear = 2016, Quantity = 4, Title = "С# 6.0. Справочник. Полное описание языка" },
                        new { Id = 11, Author = "Джонс М. Т.", ISBN = "978-5940747468", Price = 750m, PublishingYear = 2011, Quantity = 2, Title = "Программирование искусственного интеллекта в приложениях" },
                        new { Id = 12, Author = "Тарасов С. В. ", ISBN = "978-2-7466-7383-0 ", Price = 630m, PublishingYear = 2015, Quantity = 1, Title = "СУБД для программиста. Базы данных изнутри. " },
                        new { Id = 13, Author = "Джудит Гурвиц, Алан Ньюджент Ферн Халпер, Марсия Кауфман", ISBN = "978-5-699-85806-4", Price = 1450m, PublishingYear = 2015, Quantity = 4, Title = "Просто о больших данных" },
                        new { Id = 14, Author = "Флах Петер", ISBN = "978-5-97060-273-7", Price = 840m, PublishingYear = 2012, Quantity = 2, Title = "Машинное обучение. Наука и искусств.о построения алгоритмов, которые извлекают знания из данных" },
                        new { Id = 15, Author = "Уоррен Генри", ISBN = "978-5-8459-0572-9 ", Price = 610m, PublishingYear = 2004, Quantity = 3, Title = "Алгоритмические трюки для программистов" },
                        new { Id = 16, Author = "Липпман Стенли Б., Лажойе Жози, Му Барбара Э.", ISBN = "978-5-8459-1839-0", Price = 1180m, PublishingYear = 2016, Quantity = 8, Title = "Язык программирования C++" },
                        new { Id = 17, Author = "Стивенс Род", ISBN = "978-5-699-81729-0", Price = 1350m, PublishingYear = 2016, Quantity = 5, Title = "Алгоритмы. Теория и практическое применение" }
                    );
                });

            modelBuilder.Entity("Sales.Models.DataModels.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsСheckouted");

                    b.Property<string>("PromoCodeValue")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PromoCodeValue");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Sales.Models.DataModels.OrderedBook", b =>
                {
                    b.Property<int>("OrderId");

                    b.Property<int>("BookId");

                    b.Property<int>("BookAmount");

                    b.HasKey("OrderId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("OrderedBook");
                });

            modelBuilder.Entity("Sales.Models.DataModels.PromoCode", b =>
                {
                    b.Property<string>("Value");

                    b.HasKey("Value");

                    b.ToTable("PromoCodes");
                });

            modelBuilder.Entity("Sales.Models.DataModels.Order", b =>
                {
                    b.HasOne("Sales.Models.DataModels.PromoCode", "PromoCode")
                        .WithMany()
                        .HasForeignKey("PromoCodeValue")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sales.Models.DataModels.OrderedBook", b =>
                {
                    b.HasOne("Sales.Models.DataModels.Book", "Book")
                        .WithMany("OrderedBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sales.Models.DataModels.Order", "Order")
                        .WithMany("OrderedBooks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
